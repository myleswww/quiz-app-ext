{"ast":null,"code":"var _jsxFileName = \"/Users/myleswright/Documents/GitHub/quiz-app/quiz-app-ext/starter/src/Components/Quiz.js\";\nimport React, { useState } from 'react';\nimport { Component } from 'react';\nimport { Timer } from './Components/Timer';\nexport class Quiz extends Component {\n  constructor(props) {\n    const [_currentQuestion, _setCurrentQuestion] = useState(0);\n    const [showScore, _setShowScore] = useState(false);\n    const [_score, _setScore] = useState(0);\n\n    const _timer = new Timer();\n\n    const _questions = [{\n      questionText: 'What is the capital of France?',\n      answerOptions: [{\n        answerText: 'New York',\n        isCorrect: false\n      }, {\n        answerText: 'London',\n        isCorrect: false\n      }, {\n        answerText: 'Paris',\n        isCorrect: true\n      }, {\n        answerText: 'Dublin',\n        isCorrect: false\n      }]\n    }, {\n      questionText: 'Who is CEO of Tesla?',\n      answerOptions: [{\n        answerText: 'Jeff Bezos',\n        isCorrect: false\n      }, {\n        answerText: 'Elon Musk',\n        isCorrect: true\n      }, {\n        answerText: 'Bill Gates',\n        isCorrect: false\n      }, {\n        answerText: 'Tony Stark',\n        isCorrect: false\n      }]\n    }, {\n      questionText: 'The iPhone was created by which company?',\n      answerOptions: [{\n        answerText: 'Apple',\n        isCorrect: true\n      }, {\n        answerText: 'Intel',\n        isCorrect: false\n      }, {\n        answerText: 'Amazon',\n        isCorrect: false\n      }, {\n        answerText: 'Microsoft',\n        isCorrect: false\n      }]\n    }, {\n      questionText: 'How many Harry Potter books are there?',\n      answerOptions: [{\n        answerText: '1',\n        isCorrect: false\n      }, {\n        answerText: '4',\n        isCorrect: false\n      }, {\n        answerText: '6',\n        isCorrect: false\n      }, {\n        answerText: '7',\n        isCorrect: true\n      }]\n    }];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 16\n      }\n    }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"score-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timer-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Timer, {\n      timer: timer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 54\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleAnswerButtonClick(answerOption.isCorrect),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 93\n      }\n    }, answerOption.answerText)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/myleswright/Documents/GitHub/quiz-app/quiz-app-ext/starter/src/Components/Quiz.js"],"names":["React","useState","Component","Timer","Quiz","constructor","props","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","timer","questions","questionText","answerOptions","answerText","isCorrect","render","length","map","answerOption","index","handleAnswerButtonClick"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Component } from 'react';\nimport {Timer} from './Components/Timer';\n\nexport class Quiz extends Component{\n    constructor(props){\n        const [currentQuestion, setCurrentQuestion] = useState(0);\n\t    const [showScore, setShowScore] = useState(false);\n\t    const [score, setScore] = useState(0);\n\t\n\t    const timer = new Timer();\n\n        const questions = [\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n        ];\n    }\n\n    handleAnswerButtonClick = (isCorrect) => {\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\ttimer.setState({clearTag: true});\n\t\t\n\t\tif(isCorrect){\n\t\t\tsetScore(score+1);\n\t\t}\n\t\tif(nextQuestion < questions.length){\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t}\n\t\telse{\n\t\t\tsetShowScore(true);\n\t\t}\n\t\t\n\t}\n\n    render(){\n        return <div className='app'>\n        {/* HINT: replace \"false\" with logic to display the \n  score when the user has answered all the questions */\n          }\n        {showScore ? (\n            <div className='score-section'>You scored {score} out of {questions.length}</div>\n        ) : (\n            <>\n                <div className='question-section'>\n                    <div className='question-count'>\n                        <span>Question {currentQuestion+1}</span>/{questions.length}\n                    </div>\n                    <div className = \"timer-section\"><Timer timer = {timer}></Timer></div>\n                    <div className='question-text'>{questions[currentQuestion].questionText}</div>\n                </div>\n                <div className='answer-section'>\n                    {questions[currentQuestion].answerOptions.map((answerOption, index) => (<button onClick = {() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>))}\n                </div>\n            </>\n        )}\n    </div>\n    }\n}"]},"metadata":{},"sourceType":"module"}